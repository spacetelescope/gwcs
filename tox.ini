[tox]
envlist =
    check-{style,security,build}
    test{,-dev}{,-pyargs,-cov}
    test-numpy{123,125}
    build-{docs,dist}

# tox environments are constructed with so-called 'factors' (or terms)
# separated by hyphens, e.g. test-devdeps-cov. Lines below starting with factor:
# will only take effect if that factor is included in the environment name. To
# see a list of example environments that can be run, along with a description,
# run:
#
#     tox -l -v
#

[testenv:check-style]
description = check code style, e.g. with flake8
skip_install = true
deps =
    flake8
commands =
    flake8 . {posargs}

[testenv:check-security]
description = run bandit to check security compliance
skip_install = true
deps =
    bandit>=1.7
commands =
    bandit -r -ll -c .bandit.yaml gwcs

[testenv:check-build]
description = check build sdist/wheel and a strict twine check for metadata
skip_install = true
deps =
    twine>=3.3
    build
commands =
    python -m build .
    twine check --strict dist/*

[testenv]
description =
    run tests
    jwst: of JWST pipeline
    romancal: of Romancal pipeline
    romanisim: of Romanisim image simulation
    dev: with the latest developer version of key dependencies
    pyargs: with --pyargs on installed package
    warnings: treating warnings as errors
    cov: with coverage
    xdist: using parallel processing
pass_env =
    HOME
    GITHUB_*
    TOXENV
    CI
    CODECOV_*
    DISPLAY
    jwst,romancal: CRDS_*
    romanisim,romancal: WEBBPSF_PATH
    romanisim: GALSIM_CAT_PATH
    romanisim: FFTW_DIR
    romanisim: LIBRARY_PATH
set_env =
    dev: PIP_EXTRA_INDEX_URL = https://pypi.anaconda.org/astropy/simple https://pypi.anaconda.org/liberfa/simple https://pypi.anaconda.org/scientific-python-nightly-wheels/simple

args_are_paths = false
change_dir = pyargs: {env:HOME}
extras =
    test
    alldeps: all
deps =
    xdist: pytest-xdist
    cov: pytest-cov
    jwst: jwst[test] @ git+https://github.com/spacetelescope/jwst.git
    romancal: romancal[test] @ git+https://github.com/spacetelescope/romancal.git
    romanisim: romanisim[test] @ git+https://github.com/spacetelescope/romanisim.git
    numpy123: numpy==1.23.*
    numpy125: numpy==1.25.*
commands_pre =
    dev: pip install -r requirements-dev.txt -U --upgrade-strategy eager
    pip freeze
commands =
    pytest \
    warnings: -W error \
    xdist: -n auto \
    pyargs: {toxinidir}/docs --pyargs gwcs \
    jwst: --pyargs jwst --ignore-glob=timeconversion --ignore-glob=associations --ignore-glob=scripts --show-capture=no \
    romancal: --pyargs romancal \
    romanisim: --pyargs romanisim \
    cov: --cov=. --cov-config=pyproject.toml --cov-report=term-missing --cov-report=xml \
    {posargs}

[testenv:build-docs]
description = invoke sphinx-build to build the HTML docs
extras = docs
commands =
    sphinx-build -W docs docs/_build

[testenv:build-dist]
description = build wheel and sdist
skip_install = true
deps =
    build
commands =
    python -m build .

[testenv:specutils]
change_dir = {env_tmp_dir}
allowlist_externals =
    git
    bash
extras =
commands_pre =
    bash -c "pip freeze -q | grep 'gwcs @' > {env_tmp_dir}/requirements.txt"
    git clone https://github.com/astropy/specutils.git
    pip install -e specutils[test]
    pip install -r {env_tmp_dir}/requirements.txt
    pip list
commands =
    pytest specutils

[testenv:dkist]
change_dir = {env_tmp_dir}
allowlist_externals =
    git
    bash
extras =
commands_pre =
    bash -c "pip freeze -q | grep 'gwcs @' > {env_tmp_dir}/requirements.txt"
    git clone https://github.com/DKISTDC/dkist.git
    pip install -e dkist[tests]
    pip install -r {env_tmp_dir}/requirements.txt
    pip list
commands =
    pytest dkist --benchmark-skip

[testenv:ndcube]
change_dir = {env_tmp_dir}
allowlist_externals =
    git
    bash
extras =
commands_pre =
    bash -c "pip freeze -q | grep 'gwcs @' > {env_tmp_dir}/requirements.txt"
    git clone https://github.com/sunpy/ndcube.git
    pip install -e ndcube[all,tests]
    pip install -r {env_tmp_dir}/requirements.txt
    pip freeze
commands =
    pytest ndcube
